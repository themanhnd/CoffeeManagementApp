spring:
  # Database Configuration cho Docker Environment
  datasource:
    url: jdbc:postgresql://postgres:5432/coffe_management
    username: keycloak
    password: password
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
  
  jpa:
    hibernate:
      ddl-auto: none  # Sử dụng none vì đã có schema sẵn
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false  # Tắt show-sql để giảm log noise trong container
    properties:
      hibernate:
        format_sql: false
        jdbc:
          time_zone: UTC
  
  # SQL Database initialization (optional - chỉ chạy nếu cần)
  sql:
    init:
      mode: never  # Đặt never vì schema đã tồn tại
      schema-locations: classpath:schema.sql
      data-locations: classpath:data.sql
      continue-on-error: true
  
  # Redis Configuration cho Docker
  redis:
    host: redis  # Sử dụng container name thay vì localhost
    port: 6379
    password: 
    timeout: 5000ms
    jedis:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 2
        max-wait: 2000ms
  
  # Kafka Configuration cho Docker
  kafka:
    bootstrap-servers: kafka:9092  # Sử dụng container name
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
      properties:
        enable.idempotence: true
    consumer:
      group-id: coffee-management-docker-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.coffeeshop.management"
      auto-offset-reset: earliest
      max-poll-records: 500
  
  # Security Configuration cho Docker
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8080/realms/coffee-realm  # Sử dụng container name và realm

# Axon Server Configuration cho Docker
axon:
  axonserver:
    servers: axonserver:8124  # Sử dụng container name
  eventhandling:
    processors:
      default:
        mode: pooled
        pool-size: 20  # Tăng pool size cho môi trường Docker
  serializer:
    general: jackson
    events: jackson
    messages: jackson

# Event Store Configuration
event-store:
  cleanup:
    enabled: true
    batch-size: 2000
    snapshot-threshold: 150

# Logging Configuration cho Docker
logging:
  level:
    root: INFO
    com.coffeeshop.management: INFO  # Giảm log level để tránh spam logs
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] - %msg%n"
  file:
    name: /app/logs/coffee-management.log
    max-size: 100MB
    max-history: 30

# Management và Health Check
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

# Server Configuration
server:
  port: 8080
  servlet:
    context-path: /api
  shutdown: graceful  # Graceful shutdown cho container
  
# Spring Cloud Config (nếu có)
eureka:
  client:
    enabled: false  # Tắt Eureka trong Docker environment

